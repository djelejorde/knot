(window.webpackJsonp = window.webpackJsonp || []).push([['chunk-4b51bd42'], { '19bc' (e, t, n) { 'use strict'; const i = n('d4ba'); const a = n.n(i); a.a }, 8485 (e, t, n) { 'use strict'; n.r(t); const i = function () { const e = this; const t = e.$createElement; const n = e._self._c || t; return e.relationshipSetup ? n('v-sheet', [n('v-select', { staticClass: 'language-picker', attrs: { options: e.options.languages, icon: 'translate' }, model: { value: e.currentLanguage, callback (t) { e.currentLanguage = t }, expression: 'currentLanguage' } }), n('hr'), !1 === e.loading && e.initialValues !== null ? n('div', { staticClass: 'body' }, [n('v-form', { key: e.currentLanguage, attrs: { 'full-width': '', collection: e.relation.collection_many.collection, fields: e.translatedFields, values: e.currentLanguageValues, 'primary-key': e.existing && e.existing[e.translationsCollectionPrimaryKeyField] }, on: { 'stage-value': e.saveLanguage } })], 1) : n('v-spinner')], 1) : n('v-notice', { attrs: { color: 'warning', icon: 'warning' } }, [e._v(' ' + e._s(e.$t('relationship_not_setup')) + ' ')]) }; const a = []; const l = (n('99af'), n('4de4'), n('7db0'), n('4160'), n('d81d'), n('b64b'), n('d3b7'), n('07ac'), n('159b'), n('ddb0'), n('96cf'), n('1da1')); const r = n('2909'); const u = n('ade3'); const s = n('8db2'); const o = n.n(s); const c = n('2ef0'); const d = { mixins: [o.a], data () { return { currentLanguage: Object.keys(this.options.languages)[0], loading: !1, initialValues: null, relationalChanges: [] } }, computed: { translatedFields () { const e = this; if (!1 !== this.relationshipSetup) { return Object(c.mapValues)(this.relation.collection_many.fields, function (t) { return t = Object(c.clone)(t), t.field === e.relation.field_many.field && (t.readonly = !0), t }) } }, defaults () { return Object(c.mapValues)(Object(c.clone)(this.translatedFields), function (e) { return e.default_value }) }, existing () { return Object(c.find)(this.initialValues, Object(u.a)({}, this.options.languageField, this.currentLanguage)) }, translationsCollectionPrimaryKeyField () { return Object.values(this.relation.collection_many.fields).find(function (e) { return !0 === e.primary_key }).field }, currentLanguageValues () { const e = Object(c.find)(this.relationalChanges, Object(u.a)({}, this.options.languageField, this.currentLanguage)); return Object(c.merge)({}, this.existing || this.defaults, e) }, relationshipSetup () { let e; return !!((e = this.relation) === null || void 0 === e ? void 0 : e.collection_many) }, currentPrimaryKey () { const e = Object(c.find)(this.fields, { primary_key: !0 }); const t = e.field; return this.values[t] } }, watch: { relationalChanges: { deep: !0, handler (e) { e && this.emitValue(e) } } }, created () { this.fetchInitial() }, methods: { saveLanguage (e) { const t = this; const n = e.field; const i = e.value; const a = Object(c.find)(this.relationalChanges, Object(u.a)({}, this.options.languageField, this.currentLanguage)); if (a) { this.relationalChanges = this.relationalChanges.map(function (e) { return e[t.options.languageField] === t.currentLanguage ? Object(c.merge)({}, e, Object(u.a)({}, n, i)) : e }) } else { let l; const s = (l = {}, Object(u.a)(l, n, i), Object(u.a)(l, this.options.languageField, this.currentLanguage), l); if (this.existing) { const o = Object(c.find)(this.translatedFields, { primary_key: !0 }).field; const d = this.existing[o]; s[o] = d } this.relationalChanges = [].concat(Object(r.a)(this.relationalChanges), [s]) } }, emitValue (e) { if (this.initialValues.length != 0) { const t = this.options.languageField; const n = this.initialValues.map(function (n) { const i = n[t]; const a = e.find(function (e) { return e[t] === i }); return a ? Object(c.merge)({}, n, a) : n }).filter(function (e) { return e }); e.forEach(function (e) { const i = e[t]; const a = n.find(function (e) { return e[t] === i }); a || n.push(e) }), this.$emit('input', n) } else { this.$emit('input', e) } }, fetchInitial () { const e = this; return Object(l.a)(regeneratorRuntime.mark(function t () { let n, i, a, l; return regeneratorRuntime.wrap(function (t) { while (1) { switch (t.prev = t.next) { case 0:if (!1 !== e.relationshipSetup) { t.next = 2; break } return t.abrupt('return'); case 2:if (!e.values || !e.values[e.relation.field_one.field]) { t.next = 5; break } return e.initialValues = e.values[e.relation.field_one.field], t.abrupt('return'); case 5:return e.loading = !0, n = e.relation.collection_many.collection, i = e.relation.field_many.field, t.next = 10, e.$api.getItems(n, { filter: Object(u.a)({}, i, { eq: e.currentPrimaryKey }) }); case 10:a = t.sent, l = a.data, e.initialValues = l, e.loading = !1; case 14:case 'end':return t.stop() } } }, t) }))() } } }; const f = d; const g = (n('19bc'), n('2877')); const h = Object(g.a)(f, i, a, !1, null, '403d2817', null); t.default = h.exports }, '8db2' (e, t) { e.exports = { props: { id: { type: String, required: !0 }, name: { type: String, required: !0 }, value: { type: null, default: null }, type: { type: String, required: !0 }, length: { type: [String, Number], default: null }, readonly: { type: Boolean, default: !1 }, collection: { type: String, default: null }, primaryKey: { type: [Number, String], default: null }, required: { type: Boolean, default: !1 }, options: { type: Object, default: () => ({}) }, newItem: { type: Boolean, default: !1 }, relation: { type: Object, default: null }, fields: { type: Object, default: null }, values: { type: Object, default: null }, width: { type: String, default: null, validator (e) { return ['half', 'half-left', 'half-right', 'full', 'fill'].includes(e) } } } } }, d4ba (e, t, n) {} }])
// # sourceMappingURL=chunk-4b51bd42.bb866031.js.map

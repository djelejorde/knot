(window.webpackJsonp = window.webpackJsonp || []).push([['chunk-3bcec2c4'], { '3f04' (e, t, l) { 'use strict'; l.r(t); const n = function () { const e = this; const t = e.$createElement; const l = e._self._c || t; return l('v-ext-input', { attrs: { id: 'repeater', type: 'json', name: e.name, 'input-name': e.id, value: e.formattedValue, length: e.length, readonly: e.readonly, required: e.required, options: e.repeaterOptions, 'new-item': e.newItem, relation: e.relation, fields: e.fields, collection: e.collection, values: e.values, width: 'full' }, on: { input: e.emitValue } }) }; const i = []; const u = (l('4160'), l('d81d'), l('b64b'), l('159b'), l('8db2')); const a = l.n(u); const r = { mixins: [a.a], computed: { repeaterOptions () { return { fields: [{ field: 'key', interface: this.options.keyInterface, options: this.options.keyOptions, type: this.options.keyType, width: 'half' }, { field: 'value', interface: this.options.valueInterface, options: this.options.valueOptions, type: this.options.valueType, width: 'half' }] } }, formattedValue () { const e = this; return this.value === null ? null : Object.keys(this.value).map(function (t) { return { key: t, value: e.value[t] } }) } }, methods: { emitValue (e) { if (e === null) { this.$emit('input', null) } else { const t = {}; e.forEach(function (e) { const l = e.key; const n = e.value; return t[l] = n }), this.$emit('input', t) } } } }; const o = r; const p = l('2877'); const s = Object(p.a)(o, n, i, !1, null, null, null); t.default = s.exports }, '8db2' (e, t) { e.exports = { props: { id: { type: String, required: !0 }, name: { type: String, required: !0 }, value: { type: null, default: null }, type: { type: String, required: !0 }, length: { type: [String, Number], default: null }, readonly: { type: Boolean, default: !1 }, collection: { type: String, default: null }, primaryKey: { type: [Number, String], default: null }, required: { type: Boolean, default: !1 }, options: { type: Object, default: () => ({}) }, newItem: { type: Boolean, default: !1 }, relation: { type: Object, default: null }, fields: { type: Object, default: null }, values: { type: Object, default: null }, width: { type: String, default: null, validator (e) { return ['half', 'half-left', 'half-right', 'full', 'fill'].includes(e) } } } } } }])
// # sourceMappingURL=chunk-3bcec2c4.1c3acd9a.js.map
